<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.gjs.pom</groupId>
		<artifactId>parent-pom</artifactId>
		<version>1.0.0</version>
		<relativePath>../parent-pom</relativePath>
	</parent>

    <artifactId>nar-parent-pom</artifactId>
	<packaging>pom</packaging>

	<name>Maven C/C++ NAR Parent Pom</name>
	<description>Parent pom for compiling and linking C/C++ projects using the nar-maven-plugin.</description>
	
	<properties>
		<!-- NAR -->
		<nar.version>3.10.1</nar.version>

		
		<!-- Generic compilation options-->
		<architectureBits>64</architectureBits>
		<optimizationLevel>2</optimizationLevel>
		
		<!-- Optinal specific compilation options -->
		<localeOption>-DWITH_NO_C_LOCALE</localeOption>
		<openSSLOption>-DWITH_OPENSSL</openSSLOption>
		
		<!-- Aggregational platform specific compilation options -->
		<platformOptions></platformOptions>
		<platformLinkOptions></platformLinkOptions>

		<!-- Linker options -->	
		<architecture>x86_64-pc-cygwin</architecture>
		<emulation>i386pep</emulation>
		<architectureOption>-A ${architecture}</architectureOption> 
		<emulationOption>-Wl,-m,${emulation}</emulationOption> 
		
		<!-- Naming -->
		<finalName.prefix.lib>lib</finalName.prefix.lib>
		<finalName.prefix.exe></finalName.prefix.exe>
		<finalName.prefix></finalName.prefix>
		<finalName>${finalName.prefix}${project.artifactId}-${osName}-${project.version}</finalName>
			
		<!-- Opciones cppcheck -->
		<check.execute>true</check.execute>
		<check.severity>all</check.severity>	
		<check.configurations>1</check.configurations>
			
		<!-- Includes -->		
		<includeDir>${project.basedir}/target/nar/include</includeDir>
		
		<!-- Binary directories -->
		<!-- TODO: Pendiente de customizar para todos los tipos de binario -->
		<subdirBinExe>nar/${project.artifactId}-${project.version}-${nar.aol}-executable/bin/${nar.aol}</subdirBinExe>
		<subdirBinLib>nar/${project.artifactId}-${project.version}-${nar.aol}-shared/lib/${nar.aol}/shared</subdirBinLib>
		<subdirBinStLib>nar/${project.artifactId}-${project.version}-${nar.aol}-shared/lib/${nar.aol}/static</subdirBinStLib>
		<subdirObj>nar/obj/${nar.aol}</subdirObj>
		<subdirTest>test-nar/test-reports</subdirTest>
		<dirBinLib>${project.basedir}/target/${subdirBinLib}</dirBinLib>
		<dirBinStLib>${project.basedir}/target/${subdirBinStLib}</dirBinStLib>
		<dirBinExe>${project.basedir}/target/${subdirBinExe}</dirBinExe>
		<dirTest>${project.basedir}/target/${subdirTest}</dirTest>
		<dirStLib>${project.basedir}/target/lib</dirStLib>
		
		<!-- Ejecutable de cppcheck -->
		<cppCheck>${cppCheckDir}/cppcheck</cppCheck>
		
		<!-- Ejecutables auxiliares -->
		<gcovr>/ust/bin/gcovr</gcovr> 
	</properties>

	<build>	
		<pluginManagement>				
			<plugins>
				<plugin>
					<groupId>com.github.maven-nar</groupId>
					<artifactId>nar-maven-plugin</artifactId>
					<version>${nar.version}</version>
					<extensions>true</extensions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
	
	<profiles>
		<profile>
			<id>cpp</id>
			<build>	
				
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<configuration>
							<includeEmptyDirs>true</includeEmptyDirs>
						</configuration>
						<executions>
						   <execution>
								<id>copy-resources</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.basedir}/target/nar/resources</outputDirectory>
									<overwrite>true</overwrite>
									<resources>
										<resource>
											<directory>${project.basedir}/src/main/resources</directory>
											<includes>
												<include>**/**</include>
											</includes>
											<excludes>
												<exclude>**/code/**</exclude>
											</excludes>
										</resource>
									</resources>
								</configuration>
							</execution>						
						   <execution>
								<id>copy-test-resources</id>
								<phase>generate-test-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.basedir}/target/test-nar/resources</outputDirectory>
									<overwrite>true</overwrite>
									<resources>
										<resource>
											<directory>${project.basedir}/src/test/resources</directory>
											<includes>
												<include>**/**</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>						
						</executions>
					</plugin>	

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>prepareTests</id>
								<phase>generate-test-sources</phase>
								<configuration>
									<target name="prepare-context-for-tests">
										<mkdir dir="${project.basedir}/target/test-nar/results"/>
										<mkdir dir="${project.basedir}/target/test-nar/internal"/>
										<propertyfile file="${project.basedir}/target/test-nar/internal/test.properties">
											<entry key="project.basedir" value="${project.basedir}"/>
											<entry key="project.build.directory" value="${project.build.directory}"/>
											<entry key="project.build.testDirectory" value="${project.basedir}/target/test-nar"/>
										</propertyfile>
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
							
							<execution>
								<id>check</id>
								<phase>validate</phase>
								<configuration>
									<target name="execute-cppcheck" if="${checkExecute}">
										<mkdir dir="${project.basedir}/target/check"/>
										<exec executable="${cppCheck}" dir="${project.basedir}/src/main/c++" failonerror="false">
											<arg value="--language=${compilerLanguage}"/>
											<!-- TODO: Asegurar que cppcheck es la Ãºltima version -->
											<!--arg value="++std=${cppOption}"/-->
											<arg value="--std=${languageStandard}"/>
											<arg value="--platform=native"/>
											<arg value="--enable=${checkSeverity}"/>
											<arg value="--max-configs=${checkConfigurations}"/>
											<arg value="-I${project.basedir}/src/main/include"/>
											<arg value="-I${glibDirInclude}"/>
											<arg value="-I${sslDirInclude}"/>
											<arg value="-I${oraDirInclude}"/>
											<arg value="-I${xmlDirInclude}"/>
											<arg value="-I${sysIncDir}"/>
											<arg value="-I${sysIncDir2}"/>	
											<arg value="--suppress=virtualCallInConstructor"/>
											<arg value="--suppress=uninitMemberVar"/>		
											<arg value="--suppress=useInitializationList"/>		
											<arg value="--suppress=toomanyconfigs"/>												
											<arg value="--suppress='*:${sysIncDir2}/*'"/>											
											<arg value="--suppress='*:${sysIncDir}/*'"/>											
											<arg value="--suppress='*:${oraDirInclude}/*'"/>											
											<arg value="--cppcheck-build-dir=${project.basedir}/target/check"/>
											<!-- arg value="++check-config" /-->
											<arg value="*.*" />
										</exec>
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>com.github.maven-nar</groupId>
						<artifactId>nar-maven-plugin</artifactId>
						<configuration>
							<os>${osName}</os>
							<resourceDirectory>${project.basedir}/src/main/resources</resourceDirectory>
							<gnuMakeSkip>true</gnuMakeSkip>
							<!--output>${finalName}</output-->
							
							<cpp>
								<name>${compiler}</name>							
								<debug>false</debug>
								<sourceDirectory>${project.basedir}/src/main/${compilerLanguage}</sourceDirectory>
								<includes>
									<include>**/*.c</include>
									<include>**/*.cxx</include>
									<include>**/*.cc</include>
									<include>**/*.cpp</include>
								</includes>
								<excludes>
									<exclude>**/*.txt</exclude>
									<exclude>**/*.md</exclude>
									<exclude>**/*.sql</exclude>
									<exclude>**/resources/**</exclude>
								</excludes>						
								<multiThreaded>true</multiThreaded>
								<ccache>false</ccache>
							
								<options>
									<option>-m${architectureBits}</option> 
									<option>-fPIC</option> 
									<option>-fabi-version=0</option>
									<option>-O${optimizationLevel}</option> 
									<option>-Wall</option> 
									<option>-Wno-switch</option> 
									<option>-Wno-sign-compare</option> 
									<option>-Wno-pointer-arith</option>
									<option>-Wno-conversion-null</option>
									<option>-Wno-write-strings</option>
									<option>-Wunused-result</option>
									<option>${localeOption}</option>
									<option>${platformOptions}</option>
								</options>

								<includePaths>
									<includePath>
										<path>${project.basedir}/src/main/include</path>
									</includePath>
								</includePaths>						
							</cpp>
							
							<linker>
								<name>${linker}</name>
								<incremental>false</incremental>

								<options>
									<option>${architectureOption}</option> 
									<option>-v</option> 
									<option>${emulationOption}</option> 
									<option>${platformLinkOptions}</option>
								</options>
								<testOptions>
									<option>${architectureOption}</option> 
									<option>-v</option> 
									<option>${emulationOption}</option> 
									<option>${platformLinkOptions}</option>
								</testOptions>
							</linker>
							
							<tests>
								<test>
									<name>Test${exeFinalExtension}</name>
									<link>shared</link>
									<args>
										<arg>${modulo}</arg>
									</args>
								</test>
							</tests>
							
						</configuration>
					</plugin>
				</plugins>
				
				<directory>${basedir}/target</directory>
			</build>	
		</profile>	
	
		<profile>
			<id>cygwin</id>
			<!-- NOTA: No consigo que funcione sin llamar a cmd.exe y con estilo unix/linux -->
			<activation>
                 <property>
                    <name>env.PLATFORM</name>
                    <value>CYGWIN</value>
                </property>
				<os>
					<family>Windows</family>
				</os>
			</activation>
            <properties>
                <osName>windows</osName>
				<compilationType>generic</compilationType>
				<platformOptions>-DCYGWIN</platformOptions>
				<platformLinkOption>-Wl,-mcygwin</platformLinkOption>
				<exeFinalExtension>.exe</exeFinalExtension>
            </properties>
		</profile>
		<profile>
			<id>win</id>
			<activation>
                <property>
                    <name>!env.PLATFORM</name>
                </property>
				<os>
					<family>Windows</family>
				</os>
			</activation>
            <properties>
                <osName>windows</osName>
				<compilationType>generic</compilationType>
				<platformOptions>-DWINDOWS</platformOptions>
				<platformLinkOption>-Wl,-mwindows</platformLinkOption>
				<exeFinalExtension>.exe</exeFinalExtension>
            </properties>
		</profile>
		<profile>
			<id>linux</id>
			<activation>
				<os>
					<family>Linux</family>
				</os>
			</activation>
            <properties>
                <osName>linux</osName>
				<exeFinalExtension></exeFinalExtension>
				<!-- Esta propiedad se genera para windows -->
				<projectDir>${project.basedir}</projectDir>
            </properties>
		</profile>

		<profile>
			<id>no-ld-library-path</id>
			<activation>
				<os>
					<family>Windows</family>
				</os>
			</activation>
			<build>	
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>regex-property</id>
								<phase>validate</phase>
								<goals>
									<goal>regex-property</goal>
								</goals>
								<configuration>
									<name>projectDir</name>
									<value>${project.basedir}</value>
									<regex>(.*)\\([^\\]+)</regex>
									<replacement>$1/$2</replacement>
									<failIfNoMatch>true</failIfNoMatch>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
						   <execution>
								<id>copy-bin-for-test</id>
								<phase>process-test-classes</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${dirTest}</outputDirectory>
									<overwrite>true</overwrite>
									<resources>
										<resource>
											<directory>${dirBinExe}</directory>
											<includes>
												<include>*.exe</include>
											</includes>
										</resource>
										<resource>
											<directory>${dirBinLib}</directory>
											<includes>
												<include>*.dll</include>
											</includes>
										</resource>
										<resource>
											<directory>${project.basedir}/target/nar</directory>
											<includes>
												<include>**/*.dll</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>						
						</executions>
					</plugin>	
					<plugin>
						<groupId>org.codehaus.gmaven</groupId>
						<artifactId>groovy-maven-plugin</artifactId>
						<executions>
							<!-- TODO esto no sirve porque al copilar NAR borra el contenido de /obj -->
							<!--execution>
								<id>copy-static-dependencies-for-link</id>
								<phase>process-sources</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<source>
										try 
										{
											println "\n* R E C O P I L A N D O  O B J E T O S *\n"
											def baseDir = $/${projectDir}/$
											def dirTo = $/${projectDir}/$ + "/target/lib"
											println "Destino = " + dirTo + "\n"
											def fileTo = new File( dirTo )
											fileTo.mkdirs()
											project.dependencies.each() 
											{
												def dirFrom = baseDir + "/target/nar/${it.artifactId}-${it.version}-${nar.aol}-static/lib/${nar.aol}/static"
												println "${it.groupId}:${it.artifactId}:${it.version} =>" + dirFrom 
												def dir = new File( dirFrom )
												if ( dir.exists() )
												{
													def file = dirFrom + "/*.a"
													ant.copy(todir: dirTo ) 
													{
														fileset(dir: dirFrom )
														{
															include(name:"**/*.a")
														}
													}																				
												}
											}
											println "\n"
										}
										catch ( Exception ex )
										{
											println ex.getMessage();
										}
									</source>
								</configuration>
							</execution-->
							<execution>
								<id>copy-dependencies-bin-for-test</id>
								<phase>process-test-classes</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<source>
										try 
										{
											if ( project.dependencies.size() > 0 )
											{
												<!-- Para recuperar las dependencias de las dependencias es mejor ir por directorios -->
												println "\n* R E C O P I L A N D O    B I N A R I O S *\n"
												def baseDir = $/${projectDir}/$
												def dirTo = $/${projectDir}/$ + "/target/${subdirTest}"
												def dirDeps = baseDir + "/target/test-nar"
												println "Origen  = " + dirDeps
												println "Destino = " + dirTo + "\n"
												
												def dependencias = new File( dirDeps );
												def separator = System.getProperty( "file.separator" ) 
												def finLib = "-shared" + separator + "lib" + separator + "${nar.aol}" + separator + "shared"
												def finExe = "-executable" + separator + "bin" + separator + "${nar.aol}"
												def subdirRep = separator + "test-reports" + separator 
												dependencias.eachFileRecurse ( groovy.io.FileType.DIRECTORIES )
												{
													if ( ! it.path.contains( subdirRep ) )
													{
														def filename = ""
														def dirFrom = it.path
														if ( dirFrom.endsWith( finLib ) )
														{
															println "LIB: " + dirFrom
															filename = "**/*.dll"
														}
														else if ( dirFrom.endsWith( finExe ) )
														{
															println "EXE: " + dirFrom
															filename = "**/*.exe"
														}
														if ( filename.size() > 0 )
														{
															ant.copy(todir: dirTo ) 
															{
																fileset(dir: dirFrom )
																{
																	include(name: filename)
																}
															}																				
														}
													}
												}
												println "\n"
											}
										}
										catch ( Exception ex )
										{
											println ex.getMessage();
										}
									</source>
								</configuration>
							</execution>
						</executions>
					</plugin>					
				</plugins>
			</build>
		</profile>

		<profile>
			<id>cobertura</id>
			<!-- TODO compilar en un subdirectorio diferente y lanzar ejecucion de gcovr x -m despues de los test-->
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.maven-nar</groupId>
						<artifactId>nar-maven-plugin</artifactId>
						<configuration>
							<cpp>
								<options combine.children="append">
									<option>--coverage</option>
									<!--	
									<option>-fprofile-arcs</option>
									<option>-ftest-coverage</option>
									-->
								</options>
							</cpp>
							<linker>
								<options combine.children="append">
									<option>-L${gcovLibDir}</option> 
									<option>-lgcov</option> 
								</options>
								<testOptions combine.children="append">
									<option>-L${gcovLibDir}</option> 
									<option>-lgcov</option> 
								</testOptions>
							</linker>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>cobertura</id>
								<phase>test</phase>
								<configuration>
									<target name="execute-gcovr">
										<exec executable="${gcovr}" dir="${dirTest}" failonerror="true">
											<arg value="Test${exeFinalExtension}"/>
										</exec>
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>debug</id>
			<activation>
                <property>
                    <name>DEBUG</name>
                </property>
			</activation>
            <properties>
                <optimizationLevel>0</optimizationLevel>
				<compilerExtraOptions>-g</compilerExtraOptions>
            </properties>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.maven-nar</groupId>
						<artifactId>nar-maven-plugin</artifactId>
						<configuration>
							<cpp combine.children="append">
								<debug>true</debug>
							</cpp>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>	
</project>